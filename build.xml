<?xml version="1.0" encoding="UTF-8"?>
<project name="escher" default="xar">
    <xmlproperty file="expath-pkg.xml"/><!-- Adjust path below to match location of your npm binary -->
    <property name="npm" value="npm"/>
    <property name="project.version" value="${package(version)}"/>
    <property name="project.app" value="${package(abbrev)}"/>
    <property name="build.dir" value="build"/>
    <property name="app.build.dir" value="${build.dir}/${project.app}-${project.version}"/>    
    <property name="git.repo.path" value="${basedir}/.git"/>
    <available file="${git.repo.path}" type="dir" property="git.present"/>
    <property name="scripts.dir" value="node_modules/@teipublisher/pb-components/dist"/>

    <target name="clean">
        <delete includeemptydirs="true" failonerror="false">
          <fileset dir="${build.dir}" includes="**/*"/>
        </delete>
    </target>

    <target name="prepare">
        <mkdir dir="${app.build.dir}"/>
        <copy todir="${app.build.dir}">
            <fileset dir="${basedir}"
                excludes="${build.dir}/**,build.xml,README.md,.*,repo.xml.tmpl,node_modules/**,package*.json,local.node-exist.json,gulpfile.js"/>
        </copy>
        <copy todir="${app.build.dir}" overwrite="true" verbose="true">
            <fileset file="*.xml.tmpl"/>
            <filterchain>
              <replacetokens>
                <token key="name" value="${app.name}"/>
                <token key="version" value="${app.version}"/>
                <token key="url" value="${app.url}"/>
                <token key="title" value="${app.title}"/>
                <token key="commit-id" value="${git.revision}"/>
                <token key="commit-time" value="${git.time}"/>
              </replacetokens>
              <tokenfilter>
                <!-- until we move template processing to XSLT, take care with special characters -->
                <replacestring from="&amp;" to="&amp;amp;"/>
              </tokenfilter>
            </filterchain>
            <globmapper from="*.tmpl" to="*"/>
          </copy>

        <copy todir="${app.build.dir}/resources/scripts">
            <fileset dir="${scripts.dir}">
                <include name="*.js"/>
                <include name="*.map"/>
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/css">
            <fileset dir="node_modules/@teipublisher/pb-components/css">
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/lib">
            <fileset dir="node_modules/@teipublisher/pb-components/lib">
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/images">
            <fileset dir="node_modules/@teipublisher/pb-components/images">
                <include name="*/*.png"/>
            </fileset>
        </copy>        
        <copy todir="${app.build.dir}/resources/i18n">
            <fileset dir="node_modules/@teipublisher/pb-components/i18n" />
        </copy>      

    </target>
    
    <target name="xar" depends="clean,npm.install,git.revision,prepare">        
        <zip basedir="${app.build.dir}" destfile="${build.dir}/${project.app}-${project.version}.xar" excludes="${build.dir}/* node_modules/**"/>
    </target>
    
    <target name="npm.install">
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="install"/>
        </exec>
        <echo message="${npm.output}"/>
    </target>

    <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
          <arg value="--git-dir=${git.repo.path}"/>
          <arg value="rev-parse"/>
          <arg value="HEAD"/>
        </exec>
        <condition property="repository.version" value="${git.revision}" else="unknown">
          <and>
            <isset property="git.revision"/>
            <length string="${git.revision}" trim="yes" length="0" when="greater"/>
          </and>
        </condition>
        <echo>Git repo: ${repository.version}</echo>
        <exec executable="git" outputproperty="git.time" failifexecutionfails="false" errorproperty="">
          <arg value="--git-dir=${git.repo.path}"/>
          <arg value="show"/>
          <arg value="-s"/>
          <arg value="--format=%ct"/>
          <arg value="${git.revision}"/>
        </exec>
        <echo>Git time: ${git.time}</echo>
      </target>    
</project>